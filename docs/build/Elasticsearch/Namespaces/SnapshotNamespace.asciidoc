

[[Elasticsearch_Namespaces_SnapshotNamespace]]
=== Elasticsearch\Namespaces\SnapshotNamespace



Class SnapshotNamespace
Generated running $ php util/GenerateEndpoints.php 7.9


*Methods*

The class defines the following methods:

* <<Elasticsearch_Namespaces_SnapshotNamespacecleanupRepository_cleanupRepository,`cleanupRepository()`>>
* <<Elasticsearch_Namespaces_SnapshotNamespacecreate_create,`create()`>>
* <<Elasticsearch_Namespaces_SnapshotNamespacecreateRepository_createRepository,`createRepository()`>>
* <<Elasticsearch_Namespaces_SnapshotNamespacedelete_delete,`delete()`>>
* <<Elasticsearch_Namespaces_SnapshotNamespacedeleteRepository_deleteRepository,`deleteRepository()`>>
* <<Elasticsearch_Namespaces_SnapshotNamespaceget_get,`get()`>>
* <<Elasticsearch_Namespaces_SnapshotNamespacegetRepository_getRepository,`getRepository()`>>
* <<Elasticsearch_Namespaces_SnapshotNamespacerestore_restore,`restore()`>>
* <<Elasticsearch_Namespaces_SnapshotNamespacestatus_status,`status()`>>
* <<Elasticsearch_Namespaces_SnapshotNamespaceverifyRepository_verifyRepository,`verifyRepository()`>>



[[Elasticsearch_Namespaces_SnapshotNamespacecleanupRepository_cleanupRepository]]
.`cleanupRepository()`
****
[source,php]
----
/*
$params['repository']     = (string) A repository name
$params['master_timeout'] = (time) Explicit operation timeout for connection to master node
$params['timeout']        = (time) Explicit operation timeout
*/

$params = [
    // ...
];

$client = ClientBuilder::create()->build();
$response = $client->snapshot()->cleanupRepository($params);
----
****



[[Elasticsearch_Namespaces_SnapshotNamespacecreate_create]]
.`create()`
****
[source,php]
----
/*
$params['repository']          = (string) A repository name
$params['snapshot']            = (string) A snapshot name
$params['master_timeout']      = (time) Explicit operation timeout for connection to master node
$params['wait_for_completion'] = (boolean) Should this request wait until the operation has completed before returning (Default = false)
$params['body']                = (array) The snapshot definition
*/

$params = [
    // ...
];

$client = ClientBuilder::create()->build();
$response = $client->snapshot()->create($params);
----
****



[[Elasticsearch_Namespaces_SnapshotNamespacecreateRepository_createRepository]]
.`createRepository()`
****
[source,php]
----
/*
$params['repository']     = (string) A repository name
$params['master_timeout'] = (time) Explicit operation timeout for connection to master node
$params['timeout']        = (time) Explicit operation timeout
$params['verify']         = (boolean) Whether to verify the repository after creation
$params['body']           = (array) The repository definition (Required)
*/

$params = [
    // ...
];

$client = ClientBuilder::create()->build();
$response = $client->snapshot()->createRepository($params);
----
****



[[Elasticsearch_Namespaces_SnapshotNamespacedelete_delete]]
.`delete()`
****
[source,php]
----
/*
$params['repository']     = (string) A repository name
$params['snapshot']       = (string) A snapshot name
$params['master_timeout'] = (time) Explicit operation timeout for connection to master node
*/

$params = [
    // ...
];

$client = ClientBuilder::create()->build();
$response = $client->snapshot()->delete($params);
----
****



[[Elasticsearch_Namespaces_SnapshotNamespacedeleteRepository_deleteRepository]]
.`deleteRepository()`
****
[source,php]
----
/*
$params['repository']     = (list) Name of the snapshot repository to unregister. Wildcard (`*`) patterns are supported.
*/

$params = [
    // ...
];

$client = ClientBuilder::create()->build();
$response = $client->snapshot()->deleteRepository($params);
----
****



[[Elasticsearch_Namespaces_SnapshotNamespaceget_get]]
.`get()`
****
[source,php]
----
/*
$params['repository']         = (string) A repository name
$params['snapshot']           = (list) A comma-separated list of snapshot names
$params['master_timeout']     = (time) Explicit operation timeout for connection to master node
$params['ignore_unavailable'] = (boolean) Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown
$params['verbose']            = (boolean) Whether to show verbose snapshot info or only show the basic info found in the repository index blob
*/

$params = [
    // ...
];

$client = ClientBuilder::create()->build();
$response = $client->snapshot()->get($params);
----
****



[[Elasticsearch_Namespaces_SnapshotNamespacegetRepository_getRepository]]
.`getRepository()`
****
[source,php]
----
/*
$params['repository']     = (list) A comma-separated list of repository names
$params['master_timeout'] = (time) Explicit operation timeout for connection to master node
$params['local']          = (boolean) Return local information, do not retrieve the state from master node (default: false)
*/

$params = [
    // ...
];

$client = ClientBuilder::create()->build();
$response = $client->snapshot()->getRepository($params);
----
****



[[Elasticsearch_Namespaces_SnapshotNamespacerestore_restore]]
.`restore()`
****
[source,php]
----
/*
$params['repository']          = (string) A repository name
$params['snapshot']            = (string) A snapshot name
$params['master_timeout']      = (time) Explicit operation timeout for connection to master node
$params['wait_for_completion'] = (boolean) Should this request wait until the operation has completed before returning (Default = false)
$params['body']                = (array) Details of what to restore
*/

$params = [
    // ...
];

$client = ClientBuilder::create()->build();
$response = $client->snapshot()->restore($params);
----
****



[[Elasticsearch_Namespaces_SnapshotNamespacestatus_status]]
.`status()`
****
[source,php]
----
/*
$params['repository']         = (string) A repository name
$params['snapshot']           = (list) A comma-separated list of snapshot names
$params['master_timeout']     = (time) Explicit operation timeout for connection to master node
$params['ignore_unavailable'] = (boolean) Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown
*/

$params = [
    // ...
];

$client = ClientBuilder::create()->build();
$response = $client->snapshot()->status($params);
----
****



[[Elasticsearch_Namespaces_SnapshotNamespaceverifyRepository_verifyRepository]]
.`verifyRepository()`
****
[source,php]
----
/*
$params['repository']     = (string) A repository name
$params['master_timeout'] = (time) Explicit operation timeout for connection to master node
$params['timeout']        = (time) Explicit operation timeout
*/

$params = [
    // ...
];

$client = ClientBuilder::create()->build();
$response = $client->snapshot()->verifyRepository($params);
----
****


