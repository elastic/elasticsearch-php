
[discrete]
[[Elasticsearch_Namespaces_TransformNamespace]]
=== Elasticsearch\Namespaces\TransformNamespace



Class TransformNamespace
Generated running $ php util/GenerateEndpoints.php 7.9


*Methods*

The class defines the following methods:

* <<Elasticsearch_Namespaces_TransformNamespacedeleteTransform_deleteTransform,`deleteTransform()`>>
* <<Elasticsearch_Namespaces_TransformNamespacegetTransform_getTransform,`getTransform()`>>
* <<Elasticsearch_Namespaces_TransformNamespacegetTransformStats_getTransformStats,`getTransformStats()`>>
* <<Elasticsearch_Namespaces_TransformNamespacepreviewTransform_previewTransform,`previewTransform()`>>
* <<Elasticsearch_Namespaces_TransformNamespaceputTransform_putTransform,`putTransform()`>>
* <<Elasticsearch_Namespaces_TransformNamespacestartTransform_startTransform,`startTransform()`>>
* <<Elasticsearch_Namespaces_TransformNamespacestopTransform_stopTransform,`stopTransform()`>>
* <<Elasticsearch_Namespaces_TransformNamespaceupdateTransform_updateTransform,`updateTransform()`>>



[[Elasticsearch_Namespaces_TransformNamespacedeleteTransform_deleteTransform]]
.`deleteTransform()`
****
[source,php]
----
/*
$params['transform_id'] = (string) The id of the transform to delete
$params['force']        = (boolean) When `true`, the transform is deleted regardless of its current state. The default value is `false`, meaning that the transform must be `stopped` before it can be deleted.
*/

$params = [
    // ...
];

$client = ClientBuilder::create()->build();
$response = $client->transform()->deleteTransform($params);
----
****



[[Elasticsearch_Namespaces_TransformNamespacegetTransform_getTransform]]
.`getTransform()`
****
[source,php]
----
/*
$params['transform_id']   = (string) The id or comma delimited list of id expressions of the transforms to get, '_all' or '*' implies get all transforms
$params['from']           = (int) skips a number of transform configs, defaults to 0
$params['size']           = (int) specifies a max number of transforms to get, defaults to 100
$params['allow_no_match'] = (boolean) Whether to ignore if a wildcard expression matches no transforms. (This includes `_all` string or when no transforms have been specified)
*/

$params = [
    // ...
];

$client = ClientBuilder::create()->build();
$response = $client->transform()->getTransform($params);
----
****



[[Elasticsearch_Namespaces_TransformNamespacegetTransformStats_getTransformStats]]
.`getTransformStats()`
****
[source,php]
----
/*
$params['transform_id']   = (string) The id of the transform for which to get stats. '_all' or '*' implies all transforms
$params['from']           = (number) skips a number of transform stats, defaults to 0
$params['size']           = (number) specifies a max number of transform stats to get, defaults to 100
$params['allow_no_match'] = (boolean) Whether to ignore if a wildcard expression matches no transforms. (This includes `_all` string or when no transforms have been specified)
*/

$params = [
    // ...
];

$client = ClientBuilder::create()->build();
$response = $client->transform()->getTransformStats($params);
----
****



[[Elasticsearch_Namespaces_TransformNamespacepreviewTransform_previewTransform]]
.`previewTransform()`
****
[source,php]
----
/*
*/

$params = [
    // ...
];

$client = ClientBuilder::create()->build();
$response = $client->transform()->previewTransform($params);
----
****



[[Elasticsearch_Namespaces_TransformNamespaceputTransform_putTransform]]
.`putTransform()`
****
[source,php]
----
/*
$params['transform_id']     = (string) The id of the new transform.
*/

$params = [
    // ...
];

$client = ClientBuilder::create()->build();
$response = $client->transform()->putTransform($params);
----
****



[[Elasticsearch_Namespaces_TransformNamespacestartTransform_startTransform]]
.`startTransform()`
****
[source,php]
----
/*
$params['transform_id'] = (string) The id of the transform to start
$params['timeout']      = (time) Controls the time to wait for the transform to start
*/

$params = [
    // ...
];

$client = ClientBuilder::create()->build();
$response = $client->transform()->startTransform($params);
----
****



[[Elasticsearch_Namespaces_TransformNamespacestopTransform_stopTransform]]
.`stopTransform()`
****
[source,php]
----
/*
$params['transform_id']        = (string) The id of the transform to stop
$params['force']               = (boolean) Whether to force stop a failed transform or not. Default to false
$params['wait_for_completion'] = (boolean) Whether to wait for the transform to fully stop before returning or not. Default to false
$params['timeout']             = (time) Controls the time to wait until the transform has stopped. Default to 30 seconds
$params['allow_no_match']      = (boolean) Whether to ignore if a wildcard expression matches no transforms. (This includes `_all` string or when no transforms have been specified)
$params['wait_for_checkpoint'] = (boolean) Whether to wait for the transform to reach a checkpoint before stopping. Default to false
*/

$params = [
    // ...
];

$client = ClientBuilder::create()->build();
$response = $client->transform()->stopTransform($params);
----
****



[[Elasticsearch_Namespaces_TransformNamespaceupdateTransform_updateTransform]]
.`updateTransform()`
****
[source,php]
----
/*
$params['transform_id']     = (string) The id of the transform.
*/

$params = [
    // ...
];

$client = ClientBuilder::create()->build();
$response = $client->transform()->updateTransform($params);
----
****


