
== Configuration

Almost every aspect of the client is configurable.  The client is built around http://pimple.sensiolabs.org[Pimple] a light-weight dependency injection container.  Most users will only need to configure a few parameters to suit their needs.

However, since the container also controls all object instantiation, it is possible for users to completely change the internal components used by the client.  A user could, for example, write a custom ConnectionPool class and use that instead of the default connection pools that ship with the client

=== Example: Configuring the Hosts

A common operation will be telling the client what nodes are in your cluster.  By default, the client will connect to 'localhost:9200', which obviously doesn't work in many production environments.

All configurations (both simple parameters and more advanced component-replacement) are injected into the constructor of the client.  

The client accepts an array of hosts that you would like to connect to.  Each value in the array must be a string (either with or without the port number):

[source,php]
----
$params = array();
$params['hosts'] = array (
    '192.168.1.1:9200',         // IP + Port
    '192.168.1.2',              // Just IP
    'mydomain.server.com:9201', // Domain + Port
    'mydomain2.server.com'      // Just Domain 
);

$client = new Elasticsearch\Client($params);
----

This associative array holds all custom configurations that you may want to set.  Often, you'll only need to configure the hosts, but if you need more advanced behavior, read on.

=== Example: Configuring the Logger
Let's change the logging location.  By default, the client will log to a file called 'elasticsearch.log' in the root of your project.  To change this location, simply do the following:

[source,php]
----
$params = array();
$params['logPath'] = '/var/logs/elasticsearch/elasticsearch.log';

$client = new Elasticsearch\Client($params);
----
{zwsp} +

Not all parameters are strings.  For example, we can change the logging level of the client (defaults to WARN):

[source,php]
----
$params = array();
$params['logPath']  = '/var/logs/elasticsearch/elasticsearch.log';
$params['logLevel'] = \Monolog\Logger::INFO;
$client = new Elasticsearch\Client($params);
----
{zwsp} +

Easy, right?  Let's get a little more complicated and specify a custom logger.  By default, the client uses a file-based logger.  But since the logging library is https://github.com/Seldaek/monolog[Monolog], we have access to a variety of loggers.

Let's log to the SysLog instead of a file:

[source,php]
----
use Monolog\Logger;

// Build a Monolog logger that uses the SyslogHandler
$log       = new Logger('log');
$handler   = new SyslogHandler('my_user');
$processor = new IntrospectionProcessor();

$log->pushHandler($handler);
$log->pushProcessor($processor);

// Over-ride the client's logger object with your own
$params['logObject'] = $log;
$client = new Elasticsearch\Client($params);
----
{zwsp} +

=== Example: Configuring the Selector Class
When we changed the logger object, we provided a complete object that we wanted to over-ride the default with.  There are many configurations where this won't work.  For example, the Connection class must be instantiated repeatedly when new connections are made.

Rather than provide an anonymous function or callback which builds new objects, the client simply accepts a class path which is used to build new objects.  

Let's configure the Selector class.  By default, the client uses a Round-Robin selector (called RoundRobinSelector, unsurprisingly).  This will select connections in a loop, evenly distributing requests against your whole cluster.

Let's change it to a different Selector - the RandomSelector:

[source,php]
----
$params['selectorClass'] = '\Elasticsearch\ConnectionPool\Selectors\RandomSelector';
$client = new Elasticsearch\Client($params);
----
{zwsp} +

The client will now query random nodes.  Let's go one step further and define our own selector, using custom business logic that is specific to your domain.  Most configurable components in the client adhere to an interface, which makes it easy to swap them out for your own class.

Let's make a selector that only chooses the first connection.  This is obviously not a good selector (!!!), but it demonstrates the concept well:

[source,php]
----
namespace MyProject\Selectors;

use Elasticsearch\Connections\ConnectionInterface;
use Elasticsearch\ConnectionPool\Selectors\SelectorInterface

class FirstSelector implements SelectorInterface
{

    /**
     * Selects the first connection
     *
     * @param array $connections Array of Connection objects
     *
     * @return ConnectionInterface
     */
    public function select($connections)
    {
        return $connections[0];
    }

}
----
{zwsp} +

And now we can specify that when creating the client:

[source,php]
----
$params['selectorClass'] = '\MyProject\Selectors\FirstSelector';
$client = new Elasticsearch\Client($params);
----
{zwsp} +

=== Full list of configurations

.Configurations
[width="40%",frame="topbot",options="header"]
|======================
|Parameter Name | Default
|connectionClass | '\Elasticsearch\Connections\GuzzleConnection'
|connectionFactoryClass | '\Elasticsearch\Connections\ConnectionFactory'
|connectionPoolClass | '\Elasticsearch\ConnectionPool\StaticConnectionPool'
|selectorClass | '\Elasticsearch\ConnectionPool\Selectors\RoundRobinSelector'
|serializerClass | '\Elasticsearch\Serializers\ArrayToJSONSerializer'
|sniffOnStart | false
|connectionParams | array()
|logObject | null
|logPath | 'elasticsearch.log'
|logLevel | Logger::WARNING
|traceObject | null
|tracePath | 'elasticsearch.log'
|traceLevel | Logger::WARNING
|guzzleOptions | array()
|connectionPoolParams | array()
|======================
